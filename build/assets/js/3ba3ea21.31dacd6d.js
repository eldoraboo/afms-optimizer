"use strict";(self.webpackChunkafms_optimizer=self.webpackChunkafms_optimizer||[]).push([[3653],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:6},s="Complete Source Codes",i={unversionedId:"mso/source-codes",id:"mso/source-codes",title:"Complete Source Codes",description:"Zero-Shot",source:"@site/docs/mso/source-codes.md",sourceDirName:"mso",slug:"/mso/source-codes",permalink:"/docs/mso/source-codes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mso/source-codes.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Implementing Few-Shot",permalink:"/docs/mso/few-shot"}},c={},l=[{value:"Zero-Shot",id:"zero-shot",level:2},{value:"Zero-Shot (Optimized with Multi-Threading)",id:"zero-shot-optimized-with-multi-threading",level:2},{value:"Few-Shot",id:"few-shot",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"complete-source-codes"},"Complete Source Codes"),(0,o.kt)("h2",{id:"zero-shot"},"Zero-Shot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Zero_Shot.py"',title:'"Zero_Shot.py"'},'import pandas as pd\nfrom transformers import pipeline\nfrom heapq import nlargest\n\ndef parse(file_path, sheet_name, column_name):\n    df = pd.read_excel(file_path, sheet_name=sheet_name)\n    column = df[column_name].tolist()\n    return column\n\ncategories = list(set(parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Reporting_Category")))\nfeedback = parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Subject_Description")\n\nnumber = len(feedback)\ncategories_count = {category: 0 for category in categories}\n\nclassifier = pipeline("zero-shot-classification",\n                      model="facebook/bart-large-mnli")\n\ndef zero_shot(doc, candidates):\n    dictionary = classifier(doc, candidates)\n    labels = dictionary[\'labels\']\n    scores = dictionary[\'scores\']\n    return dict(zip(labels, scores))\n\ndef top(feed, cats):\n    results = zero_shot(feed, cats)\n    topthree = nlargest(3, results, key=results.get)\n    for top in topthree:\n        categories_count[top] += 1\n    return topthree\n\ncount = 0\nfor feed in feedback:\n    count += 1\n    top(feed, categories)\n    print(f"{count}: {categories_count}")       \n\nprint(categories_count)\n')),(0,o.kt)("h2",{id:"zero-shot-optimized-with-multi-threading"},"Zero-Shot (Optimized with Multi-Threading)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Zero_Shot_Optimized.py"',title:'"Zero_Shot_Optimized.py"'},'import pandas as pd\nimport concurrent.futures\nfrom transformers import pipeline\nfrom heapq import nlargest\n\ndef parse(file_path, sheet_name, column_name):\n    df = pd.read_excel(file_path, sheet_name=sheet_name)\n    column = df[column_name].tolist()\n    return column\n\ncategories = list(set(parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Reporting_Category")))\nfeedback = parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Subject_Description")\n\nnumber = len(feedback)\ncategories_count = {category: 0 for category in categories}\n\nclassifier = pipeline("zero-shot-classification",\n                      model="facebook/bart-large-mnli")\n\ndef zero_shot(doc, candidates):\n    dictionary = classifier(doc, candidates)\n    labels = dictionary[\'labels\']\n    scores = dictionary[\'scores\']\n    return dict(zip(labels, scores))\n\ndef top(feed, cats):\n    results = zero_shot(feed, cats)\n    topthree = nlargest(3, results, key=results.get)\n    for top in topthree:\n        categories_count[top] += 1\n    return topthree\n\ncount = 0\nwith concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:\n    futures = [executor.submit(top, feed, categories) for feed in feedback]\n    for future in concurrent.futures.as_completed(futures):\n        count += 1\n        topthree = future.result()\n        print(f"{count}: {categories_count}")\n\nprint(categories_count)\n')),(0,o.kt)("h2",{id:"few-shot"},"Few-Shot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Few_Shot.py"',title:'"Few_Shot.py"'},'import spacy\nimport classy_classification\nimport csv\nimport pandas as pd\nimport os\n\ndef few_shot(doc, csv_file):\n    df = pd.read_csv(csv_file.name)\n    data = {}\n    sample_size = 10\n\n    candidate_labels = df[\'label\'].unique().tolist()\n\n    for label in candidate_labels:\n        candidate_values = df.query(f"`label` == \'{label}\'").sample(\n            n=sample_size)[\'text\'].values.tolist()\n        data[label] = candidate_values\n\n    nlp = spacy.blank("en")\n    nlp.add_pipe(\n        "text_categorizer",\n        config={\n            "data": data,\n            "model": "sentence-transformers/all-mpnet-base-v2",\n            "device": "gpu"\n        }\n    )\n\n    dictionary = nlp(doc)._.cats\n    return dictionary\n\nprint(few_shot("feedback", os.path.join(os.path.dirname(__file__),"files/train.csv")))\n')))}u.isMDXComponent=!0}}]);