"use strict";(self.webpackChunkafms_optimizer=self.webpackChunkafms_optimizer||[]).push([[9111],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(r),f=o,m=l["".concat(i,".").concat(f)]||l[f]||d[f]||c;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,a=new Array(c);a[0]=f;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[l]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<c;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5948:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const c={sidebar_position:5},a="Complete Source Code",s={unversionedId:"mso/source-code",id:"mso/source-code",title:"Complete Source Code",description:"",source:"@site/docs/mso/source-code.md",sourceDirName:"mso",slug:"/mso/source-code",permalink:"/docs/mso/source-code",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mso/source-code.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Model Setup",permalink:"/docs/mso/model-setup"}},i={},u=[],p={toc:u},l="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"complete-source-code"},"Complete Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'import pandas as pd\n\ndef parse(file_path, sheet_name, column_name):\n    df = pd.read_excel(file_path, sheet_name=sheet_name)\n    column = df[column_name].tolist()\n    return column\n\ncategories = list(set(parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Reporting_Category")))\nfeedback = parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Subject_Description")\n\nnumber = len(feedback)\ncategories_count = {category: 0 for category in categories}\ncount = 0\n\nimport concurrent.futures\nfrom transformers import pipeline\nfrom heapq import nlargest\n\nclassifier = pipeline("zero-shot-classification",\n                      model="facebook/bart-large-mnli")\n\ndef zero_shot(doc, candidates):\n    dictionary = classifier(doc, candidates)\n    labels = dictionary[\'labels\']\n    scores = dictionary[\'scores\']\n    return dict(zip(labels, scores))\n\ndef top(feed, cats):\n    results = zero_shot(feed, cats)\n    topthree = nlargest(3, results, key=results.get)\n    for top in topthree:\n        categories_count[top] += 1\n    return topthree\n\ncount = 0\nwith concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:\n    futures = [executor.submit(top, feed, categories) for feed in feedback]\n    for future in concurrent.futures.as_completed(futures):\n        count += 1\n        topthree = future.result()\n        print(f"{count}: {categories_count}")\n\nprint(categories_count)\n')))}d.isMDXComponent=!0}}]);