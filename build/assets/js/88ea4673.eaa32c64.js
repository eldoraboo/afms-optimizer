"use strict";(self.webpackChunkafms_optimizer=self.webpackChunkafms_optimizer||[]).push([[9355],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4029:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={slug:"setting-up-docker-to-connect-client-and-server",title:"Setting Up Docker To Connect Client and Server",authors:["eldoraboo"],tags:["tutorial"]},i=void 0,l={permalink:"/blog/setting-up-docker-to-connect-client-and-server",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-02-17-setting-up-docker-to-connect-client-and-server.md",source:"@site/blog/2023-02-17-setting-up-docker-to-connect-client-and-server.md",title:"Setting Up Docker To Connect Client and Server",description:"Prerequisities",date:"2023-02-17T00:00:00.000Z",formattedDate:"February 17, 2023",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:2.825,hasTruncateMarker:!1,authors:[{name:"Eldora Boo",title:"Data Engineer of AFMS Project",url:"https://github.com/eldoraboo",imageURL:"https://github.com/eldoraboo.png",key:"eldoraboo"}],frontMatter:{slug:"setting-up-docker-to-connect-client-and-server",title:"Setting Up Docker To Connect Client and Server",authors:["eldoraboo"],tags:["tutorial"]},prevItem:{title:"Using Flask to Zip and Download Files (Part 2)",permalink:"/blog/using-flask-to-zip-and-download-files-part-2"},nextItem:{title:"Set Up Backend Server (Python) on Docker",permalink:"/blog/set-up-backend-server-python-on-docker"}},s={authorsImageUrls:[void 0]},c=[{value:"Prerequisities",id:"prerequisities",level:3},{value:"Step 1: Open <code>afms &gt; dist &gt; app.js</code>",id:"step-1-open-afms--dist--appjs",level:3},{value:"Step 2: Open <code>optimiser &gt; server.py</code>",id:"step-2-open-optimiser--serverpy",level:3},{value:"Step 3: Build the Docker Images",id:"step-3-build-the-docker-images",level:3},{value:"Step 4: Run the Docker Containers",id:"step-4-run-the-docker-containers",level:3},{value:"Step 5: Check the Running Containers",id:"step-5-check-the-running-containers",level:3},{value:"Step 6: Access the client/server",id:"step-6-access-the-clientserver",level:3},{value:"Step 7: Check the Docker Logs",id:"step-7-check-the-docker-logs",level:3},{value:"Step 8: Stop the Docker Containers",id:"step-8-stop-the-docker-containers",level:3},{value:"Final Words",id:"final-words",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"prerequisities"},"Prerequisities"),(0,a.kt)("p",null,"This article assumes we already have these two Dockerfiles in their respective folders."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="afms > Dockerfile" withLineNumbers',title:'"afms',">":!0,'Dockerfile"':!0,withLineNumbers:!0},'# Stage 1 - the build process\nFROM node:12-alpine as build-deps\nWORKDIR /usr/src/app\nCOPY package.json yarn.lock ./\nRUN apk add --no-cache autoconf\nRUN yarn\nCOPY . ./\nRUN yarn build\n\n# Stage 2 - the production environment\nFROM nginx:1.21-alpine\nCOPY --from=build-deps /usr/src/app/dist /usr/share/nginx/html\nEXPOSE 443\nCMD ["nginx", "-g", "daemon off;"]\n')),(0,a.kt)("br",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="optimiser > Dockerfile" withLineNumbers',title:'"optimiser',">":!0,'Dockerfile"':!0,withLineNumbers:!0},'# Stage 1 - installing dependencies\nFROM continuumio/miniconda3:latest\nWORKDIR /app\nCOPY *.py .\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    libgl1-mesa-glx \\\n    libglib2.0-0 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Stage 2 - conda & pip set up\nRUN pip install flask flask_cors\nCOPY environment.yml .\nRUN conda config --set channel_priority strict\nRUN conda create -n opt python=3.9\nRUN /bin/bash -c "source activate opt"\nRUN conda install -c conda-forge scip\nRUN conda install -c conda-forge pyscipopt\nRUN conda install -c conda-forge geopandas\nRUN conda install -c conda-forge pyproj\n\n# Stage 3 - activate script\nCOPY server.py .\nEXPOSE 5000\nSHELL ["conda", "run", "-n", "opt" "/bin/bash", "-c"]\nCMD ["python", "server.py"]\n')),(0,a.kt)("h3",{id:"step-1-open-afms--dist--appjs"},"Step 1: Open ",(0,a.kt)("inlineCode",{parentName:"h3"},"afms > dist > app.js")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl + F")," to look for ",(0,a.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),", then replace it with ",(0,a.kt)("inlineCode",{parentName:"p"},"172.17.0.1")),(0,a.kt)("h3",{id:"step-2-open-optimiser--serverpy"},"Step 2: Open ",(0,a.kt)("inlineCode",{parentName:"h3"},"optimiser > server.py")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl + F")," to look for ",(0,a.kt)("inlineCode",{parentName:"p"},"app.run()"),", then add ",(0,a.kt)("inlineCode",{parentName:"p"},'host="0.0.0.0"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},"port=5000")," to the arguments"),(0,a.kt)("h3",{id:"step-3-build-the-docker-images"},"Step 3: Build the Docker Images"),(0,a.kt)("p",null,"Once you have created the Dockerfiles and setup the files accordingly, we will build the images."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"cd afms\ndocker build . -t client-frontend\n# Estimated runtime: 20 seconds\n")),(0,a.kt)("p",null,"Ensure that you are in the correct folders when building the images"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"cd optimiser\ndocker build . -t server-backend\n# Estimated runtime: 4000 seconds\n")),(0,a.kt)("h3",{id:"step-4-run-the-docker-containers"},"Step 4: Run the Docker Containers"),(0,a.kt)("p",null,"Once the Docker images has been built, you can use the following commands to run the Docker containers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"docker run -d -p 443:80 client-frontend\n")),(0,a.kt)("p",null,"We will expose port 443 on the host."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"docker run -d -p 5000:5000 server-backend\n")),(0,a.kt)("h3",{id:"step-5-check-the-running-containers"},"Step 5: Check the Running Containers"),(0,a.kt)("p",null,"To check the running containers, you can use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"docker ps -a\n")),(0,a.kt)("h3",{id:"step-6-access-the-clientserver"},"Step 6: Access the client/server"),(0,a.kt)("p",null,"To access the client, visit ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:443"),".\nTo access the server, visit ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:5000"),"."),(0,a.kt)("h3",{id:"step-7-check-the-docker-logs"},"Step 7: Check the Docker Logs"),(0,a.kt)("p",null,"If you encounter any issues, you can check the Docker logs to see what might be causing the problem. Use the following command to view the logs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"docker logs <container_id>\n")),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"<container_id>")," with the actual ID of the container you want to view the logs for."),(0,a.kt)("h3",{id:"step-8-stop-the-docker-containers"},"Step 8: Stop the Docker Containers"),(0,a.kt)("p",null,"When you\u2019re done, you can stop the Docker containers using the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"docker stop <container_id>\n")),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"<container_id>")," with the actual ID of the container you want to view the logs for."),(0,a.kt)("h3",{id:"final-words"},"Final Words"),(0,a.kt)("p",null,"In case the port 3000 is already in use, you can use the following command to check which processes are involved:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"sudo lsof -i -P -n | grep 3000\n")),(0,a.kt)("p",null,"Lastly, to kill the process involved, use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"Terminal",Terminal:!0},"kill -9 <pid>\n")),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"<pid>")," with the actual process ID of the process you want to kill."))}u.isMDXComponent=!0}}]);