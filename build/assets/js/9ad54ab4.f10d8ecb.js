"use strict";(self.webpackChunkafms_optimizer=self.webpackChunkafms_optimizer||[]).push([[8706],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:6},o="Implementing Few-Shot",l={unversionedId:"mso/few-shot",id:"mso/few-shot",title:"Implementing Few-Shot",description:"Overview",source:"@site/docs/mso/few-shot.md",sourceDirName:"mso",slug:"/mso/few-shot",permalink:"/docs/mso/few-shot",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mso/few-shot.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Complete Source Code",permalink:"/docs/mso/source-code"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Required Libraries",id:"required-libraries",level:2},{value:"Function",id:"function",level:2},{value:"few_shot",id:"few_shot",level:3},{value:"Main Code",id:"main-code",level:2},{value:"Format of Training Data",id:"format-of-training-data",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"implementing-few-shot"},"Implementing Few-Shot"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This Python script uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"spacy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"classy_classification"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"csv"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"pandas")," libraries to perform few-shot classification of parcel sorting feedback entries. The script defines a function ",(0,r.kt)("inlineCode",{parentName:"p"},"few_shot")," that trains a text categorizer on a small dataset and classifies a given input text. The training data is provided as a CSV file."),(0,r.kt)("h2",{id:"required-libraries"},"Required Libraries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import spacy\nimport classy_classification\nimport csv\nimport pandas as pd\nimport os\n")),(0,r.kt)("h2",{id:"function"},"Function"),(0,r.kt)("h3",{id:"few_shot"},"few_shot"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"few_shot(doc, csv_file)\n")),(0,r.kt)("p",null,"This function takes two arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"doc"),": A string representing the ",(0,r.kt)("strong",{parentName:"li"},"input text")," to be classified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"csv_file"),": A string representing the ",(0,r.kt)("strong",{parentName:"li"},"path to the CSV file")," containing the ",(0,r.kt)("strong",{parentName:"li"},"training data."))),(0,r.kt)("p",null,"The function reads the CSV file, processes the ",(0,r.kt)("strong",{parentName:"p"},"training data"),", trains a ",(0,r.kt)("strong",{parentName:"p"},"text categorizer model")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"classy_classification")," package, and ",(0,r.kt)("strong",{parentName:"p"},"classifies the input text"),". It returns a dictionary with the ",(0,r.kt)("strong",{parentName:"p"},"candidate categories as keys")," and their respective ",(0,r.kt)("strong",{parentName:"p"},"classification scores as values"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def few_shot(doc, csv_file):\n    df = pd.read_csv(csv_file.name)\n    data = {}\n    sample_size = 10\n\n    candidate_labels = df[\'label\'].unique().tolist()\n\n    for label in candidate_labels:\n        candidate_values = df.query(f"`label` == \'{label}\'").sample(\n            n=sample_size)[\'text\'].values.tolist()\n        data[label] = candidate_values\n\n    nlp = spacy.blank("en")\n    nlp.add_pipe(\n        "text_categorizer",\n        config={\n            "data": data,\n            "model": "sentence-transformers/all-mpnet-base-v2",\n            "device": "gpu"\n        }\n    )\n\n    dictionary = nlp(doc)._.cats\n    return dictionary\n')),(0,r.kt)("h2",{id:"main-code"},"Main Code"),(0,r.kt)("p",null,"To use this script, you need to have a ",(0,r.kt)("strong",{parentName:"p"},"text input")," (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"feedback"),") and a CSV file containing the ",(0,r.kt)("strong",{parentName:"p"},"training data"),". You can then call the ",(0,r.kt)("inlineCode",{parentName:"p"},"few_shot")," function to process the ",(0,r.kt)("strong",{parentName:"p"},"text input")," and get the ",(0,r.kt)("strong",{parentName:"p"},"classification results"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'few_shot("feedback", os.path.join(os.path.dirname(__file__),"files/train1.csv"))\n')),(0,r.kt)("h2",{id:"format-of-training-data"},"Format of Training Data"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"training data CSV file")," should have the ",(0,r.kt)("strong",{parentName:"p"},"following format"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"label"),(0,r.kt)("th",{parentName:"tr",align:null},"text"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"label_1"),(0,r.kt)("td",{parentName:"tr",align:null},"feedback_1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"label_2"),(0,r.kt)("td",{parentName:"tr",align:null},"feedback_2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"label_3"),(0,r.kt)("td",{parentName:"tr",align:null},"feedback_3")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label"),": The label column contains the ",(0,r.kt)("strong",{parentName:"li"},"category")," corresponding to each training example."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"text"),": The text column contains the ",(0,r.kt)("strong",{parentName:"li"},"training examples"),".")))}m.isMDXComponent=!0}}]);