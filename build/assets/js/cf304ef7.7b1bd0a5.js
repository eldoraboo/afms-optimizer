"use strict";(self.webpackChunkafms_optimizer=self.webpackChunkafms_optimizer||[]).push([[6805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Data Extraction",l={unversionedId:"mso/data-extraction",id:"mso/data-extraction",title:"Data Extraction",description:"Overview",source:"@site/docs/mso/data-extraction.md",sourceDirName:"mso",slug:"/mso/data-extraction",permalink:"/docs/mso/data-extraction",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mso/data-extraction.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Sandbox",permalink:"/docs/mso/sandbox"},next:{title:"Model Setup",permalink:"/docs/mso/model-setup"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Functions",id:"functions",level:2},{value:"Main Code",id:"main-code",level:2}],p={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-extraction"},"Data Extraction"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This Python script imports the necessary ",(0,r.kt)("inlineCode",{parentName:"p"},"pandas")," library and defines a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," to ",(0,r.kt)("strong",{parentName:"p"},"extract specific columns")," from an Excel file. The main objective of this script is to process a dataset containing ",(0,r.kt)("strong",{parentName:"p"},"parcel sorting feedback")," and count the ",(0,r.kt)("strong",{parentName:"p"},"number of occurrences")," of each unique reporting category."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import pandas as pd\n")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"parse(file_path, sheet_name, column_name)\n")),(0,r.kt)("p",null,"This function takes three arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_path"),": A string representing the ",(0,r.kt)("strong",{parentName:"li"},"path")," to the input Excel file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sheet_name"),": A string representing the ",(0,r.kt)("strong",{parentName:"li"},"name of the sheet")," within the Excel file to process."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"column_name"),": A string representing the ",(0,r.kt)("strong",{parentName:"li"},"name of the column")," to extract from the specified sheet.")),(0,r.kt)("p",null,"The function reads the ",(0,r.kt)("strong",{parentName:"p"},"Excel file")," using the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"file_path")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sheet_name"),", then extracts the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"column_name"),". It converts the ",(0,r.kt)("strong",{parentName:"p"},"extracted column into a list")," and returns it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def parse(file_path, sheet_name, column_name):\n    df = pd.read_excel(file_path, sheet_name=sheet_name)\n    column = df[column_name].tolist()\n    return column\n")),(0,r.kt)("h2",{id:"main-code"},"Main Code"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Calls the ",(0,r.kt)("inlineCode",{parentName:"li"},"parse")," function to extract the ",(0,r.kt)("strong",{parentName:"li"},"unique reporting categories")," from the Excel file and stores them in the ",(0,r.kt)("inlineCode",{parentName:"li"},"categories")," variable as a list."),(0,r.kt)("li",{parentName:"ol"},"Calls the ",(0,r.kt)("inlineCode",{parentName:"li"},"parse")," function again to ",(0,r.kt)("strong",{parentName:"li"},"extract the subject descriptions")," from the Excel file and stores them in the ",(0,r.kt)("inlineCode",{parentName:"li"},"feedback")," variable as a list."),(0,r.kt)("li",{parentName:"ol"},"Calculates the ",(0,r.kt)("strong",{parentName:"li"},"number of feedback entries")," in the dataset and stores it in the ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," variable."),(0,r.kt)("li",{parentName:"ol"},"Creates a dictionary called ",(0,r.kt)("inlineCode",{parentName:"li"},"categories_count")," to store the ",(0,r.kt)("strong",{parentName:"li"},"count of occurrences for each category"),", initializing each count to 0."),(0,r.kt)("li",{parentName:"ol"},"Defines a variable ",(0,r.kt)("inlineCode",{parentName:"li"},"count")," and initializes it to 0. This variable can be used later to ",(0,r.kt)("strong",{parentName:"li"},"count occurrences")," of specific subjects or other elements.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'categories = list(set(parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Reporting_Category")))\nfeedback = parse("Copy of parcel_sorting_feedback_2020_2022_updated.xlsx", "parcel_sorting_feedback_2020_20", "Subject_Description")\n\nnumber = len(feedback)\ncategories_count = {category: 0 for category in categories}\ncount = 0\n')))}u.isMDXComponent=!0}}]);