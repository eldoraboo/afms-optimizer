"use strict";(self.webpackChunkafms_optimizer=self.webpackChunkafms_optimizer||[]).push([[2701],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9608:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1},i="Downloading Result Files",s={unversionedId:"added-features/downloading-result-files",id:"added-features/downloading-result-files",title:"Downloading Result Files",description:"To access the files processed in the optimizer backend, we improved the API to include a downloadfile method that allows users to **download the results** stored in the output folder_. Then we add a function in the frontend to auto-download the file once the optimization process is completed.",source:"@site/docs/added-features/downloading-result-files.md",sourceDirName:"added-features",slug:"/added-features/downloading-result-files",permalink:"/docs/added-features/downloading-result-files",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/added-features/downloading-result-files.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Added Features",permalink:"/docs/category/added-features"},next:{title:"Further Improvements",permalink:"/docs/category/further-improvements"}},l={},d=[{value:"Improving the API Function",id:"improving-the-api-function",level:2},{value:"Original <code>run()</code> function",id:"original-run-function",level:3},{value:"Improved <code>run()</code> function",id:"improved-run-function",level:3},{value:"Adding a Function to Clear Cache",id:"adding-a-function-to-clear-cache",level:2},{value:"Auto-Download Function",id:"auto-download-function",level:2}],u={toc:d},p="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"downloading-result-files"},"Downloading Result Files"),(0,o.kt)("p",null,"To access the files processed in the ",(0,o.kt)("strong",{parentName:"p"},"optimizer")," backend, we improved the ",(0,o.kt)("strong",{parentName:"p"},"API")," to include a ",(0,o.kt)("inlineCode",{parentName:"p"},"download_file")," method that allows users to ",(0,o.kt)("strong",{parentName:"p"},"download the results")," stored in the ",(0,o.kt)("em",{parentName:"p"},"output folder"),". Then we add a ",(0,o.kt)("strong",{parentName:"p"},"function")," in the frontend to ",(0,o.kt)("strong",{parentName:"p"},"auto-download")," the file once the ",(0,o.kt)("strong",{parentName:"p"},"optimization process")," is completed."),(0,o.kt)("p",null,"As only ",(0,o.kt)("strong",{parentName:"p"},"port 80")," is exposed, this method enables users to retrieve the files via the frontend."),(0,o.kt)("h2",{id:"improving-the-api-function"},"Improving the API Function"),(0,o.kt)("h3",{id:"original-run-function"},"Original ",(0,o.kt)("inlineCode",{parentName:"h3"},"run()")," function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="optimiser/server.py"',title:'"optimiser/server.py"'},'@app.route(\'/run\', methods=["POST"])\ndef run():\n    ...\n    return jsonify({"status": "success"})\n')),(0,o.kt)("h3",{id:"improved-run-function"},"Improved ",(0,o.kt)("inlineCode",{parentName:"h3"},"run()")," function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="optimiser/server.py"',title:'"optimiser/server.py"'},"@app.route('/run', methods=[\"POST\"])\ndef run():\n    ...\n    return send_file(f\"{output_folder}/results.zip\",\n        mimetype = 'zip',\n        attachment_filename= 'results.zip',\n        as_attachment = True)\n")),(0,o.kt)("h2",{id:"adding-a-function-to-clear-cache"},"Adding a Function to Clear Cache"),(0,o.kt)("p",null,"We want to make sure we ",(0,o.kt)("strong",{parentName:"p"},"do not cache the outputs")," of the previous optimization runs, so we ",(0,o.kt)("strong",{parentName:"p"},"clear the cache")," after every call to the function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="optimiser/server.py"',title:'"optimiser/server.py"'},"@app.after_request\ndef add_header(response):\n  response.headers['X-UA-Compatible'] = 'IE=Edge, chrome=1'\n  response.headers['Cache-Control'] = 'public, max-age=0'\n  return response\n")),(0,o.kt)("h2",{id:"auto-download-function"},"Auto-Download Function"))}c.isMDXComponent=!0}}]);